<%@ page language="java" import="java.util.*, java.security.*, java.io.*, java.net.*" %>
<%!
/**====================================================================================
  Description        : 캐릭터셋 정의
  EUC-KR: @ page contentType="text/html;charset=EUC-KR
  UTF-8: @ page contentType="text/html;charset=UTF-8
====================================================================================**/

/**====================================================================================
  Description        :  사용 함수 선언
====================================================================================**/
 /**
 * nullcheck
 * @param str, Defaultvalue
 * @return
 */

 public static String nullcheck(String str,  String Defaultvalue )// throws Exception
 {
      String ReturnDefault = "" ;
      if (str == null)
      {
          ReturnDefault =  Defaultvalue ;
      }
      else if (str == "" )
     {
          ReturnDefault =  Defaultvalue ;
      }
      else
      {
                  ReturnDefault = str ;
      }
       return ReturnDefault ;
 }
 /**
 * BASE64 Encoder
 * @param str
 * @return
 */
public static String base64Encode(String str) // throws java.io.IOException
{
    String result = "";
    if ((str == null) || (str.length() == 0)) str = "";
    try
    {
        sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
        byte[] strByte = str.getBytes();
        result = encoder.encode(strByte);
    }
    catch (Exception e) {}
    return result ;
}

/**
 * BASE64 Decoder
 * @param str
 * @return
 */
public static String base64Decode(String str) // throws java.io.IOException
{
    String result = "";
    if ((str == null) || (str.length() == 0)) str = "";
    try
    {
        sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
        byte[] strByte = decoder.decodeBuffer(str);
        result = new String(strByte);
    } catch (IOException e) {}
    return result ;
}
%>
<%!
//HttpServletRequest request = null;
/**====================================================================================
  Description        :  사용자 샘플코드
====================================================================================**/
String charsetType = "UTF-8"; //EUC-KR 또는 UTF-8

String sendSMS(String receiver, String message)
{
    //request.setCharacterEncoding(charsetType);
    //response.setCharacterEncoding(charsetType);
    //String  action     = nullcheck(request.getParameter("action"), "");

    UserDB.PrintLog("MESSAGE RECEIVER: " + receiver);
    UserDB.PrintLog("MESSAGE LENGTH: " + message.length());
    UserDB.PrintLog("MESSAGE CONTENTS: [" + message + "]");
    //if(action.equals("go")) {
    try
    {
        String arrKey[]
            = new String[] {"user_id","secure","msg", "rphone","sphone1","sphone2","sphone3","rdate","rtime"
                        ,"mode","testflag","destination","repeatFlag","repeatNum", "repeatTime", "smsType", "subject"};
        String valKey[]= new String[arrKey.length] ;

    	String sms_url = "https://sslsms.cafe24.com/sms_sender.php"; // SMS 전송요청 URL
        String[] host_info = sms_url.split("/");
        String host = host_info[2];
        String path = "/" + host_info[3];
        int port = 80;

        InetAddress addr = InetAddress.getByName(host);
        Socket socket = new Socket(host, port);
        // 헤더 전송
        BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), charsetType));

        BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream(),charsetType));
        String line;
        String alert = "";

        String user_id = base64Encode("wellness1414"); // SMS아이디
        String secure = base64Encode("1b811eb41bb2f6f0f246392b3d164579");//인증키
        //String msg = base64Encode(nullcheck(request.getParameter("msg"), ""));
        String msg = base64Encode(nullcheck(message, ""));
        //String rphone = base64Encode(nullcheck(request.getParameter("rphone"), ""));
        String rphone = base64Encode(nullcheck(receiver, ""));
        //String sphone1 = base64Encode(nullcheck(request.getParameter("sphone1"), ""));
        //String sphone2 = base64Encode(nullcheck(request.getParameter("sphone2"), ""));
        //String sphone1 = base64Encode(nullcheck("02-557-3545", ""));
        //String sphone2 = base64Encode(nullcheck("02-557-3579", ""));
        //String sphone3 = base64Encode(""); // base64Encode(nullcheck(request.getParameter("sphone3"), ""));
        String sphone1 = base64Encode("02");
        String sphone2 = base64Encode("557");
        String sphone3 = base64Encode("3545"); // base64Encode(nullcheck(request.getParameter("sphone3"), ""));
        String rdate = base64Encode(""); // base64Encode(nullcheck(request.getParameter("rdate"), ""));
        String rtime = base64Encode(""); // base64Encode(nullcheck(request.getParameter("rtime"), ""));
        String mode = base64Encode("1");
        String subject = base64Encode("마더앤베이비가입");
        //if(nullcheck(request.getParameter("smsType"), "").equals("L")) {
        //    subject = base64Encode(nullcheck(request.getParameter("subject"), ""));
        //}     
        String testflag = base64Encode(""); // base64Encode(nullcheck(request.getParameter("testflag"), ""));
        String destination = base64Encode(""); // base64Encode(nullcheck(request.getParameter("destination"), ""));
        String repeatFlag = base64Encode(""); // base64Encode(nullcheck(request.getParameter("repeatFlag"), ""));
        String repeatNum = base64Encode(""); // base64Encode(nullcheck(request.getParameter("repeatNum"), ""));
        String repeatTime = base64Encode(""); // base64Encode(nullcheck(request.getParameter("repeatTime"), ""));
        String returnurl = base64Encode(""); // nullcheck(request.getParameter("returnurl"), "");
        String nointeractive = base64Encode(""); // nullcheck(request.getParameter("nointeractive"), "");
    	String smsType = base64Encode("L"); // base64Encode(nullcheck(request.getParameter("smsType"), ""));


        // 데이터 맵핑 변수 정의
        valKey[0] = user_id;
        valKey[1] = secure;
        valKey[2] = msg;
        valKey[3] = rphone;
        valKey[4] = sphone1;
        valKey[5] = sphone2;
        valKey[6] = sphone3;
        valKey[7] = rdate;
        valKey[8] = rtime;
        valKey[9] = mode;
        valKey[10] = testflag;
        valKey[11] = destination;
        valKey[12] = repeatFlag;
        valKey[13] = repeatNum;
        valKey[14] = repeatTime;
        valKey[15] = smsType;
        valKey[16] = subject;
       
        String boundary = "";
        Random rnd = new Random();
        String rndKey = Integer.toString(rnd.nextInt(32000));
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] bytData = rndKey.getBytes();
        md.update(bytData);
        byte[] digest = md.digest();
        for(int i =0;i<digest.length;i++)
        {
            boundary = boundary + Integer.toHexString(digest[i] & 0xFF);
        }
        boundary = "---------------------"+boundary.substring(0,11);

        // 본문 생성
        String data = "";
        String index = "";
        String value = "";
        for (int i=0;i<arrKey.length; i++)
        {
            index =  arrKey[i];
            value = valKey[i];
            data +="--"+boundary+"\r\n";
            data += "Content-Disposition: form-data; name=\""+index+"\"\r\n";
            data += "\r\n"+value+"\r\n";
            data +="--"+boundary+"\r\n";
        }

        //UserDB.PrintLog(data);

        wr.write("POST "+path+" HTTP/1.0\r\n");
        wr.write("Content-Length: "+data.length()+"\r\n");
        wr.write("Content-type: multipart/form-data, boundary="+boundary+"\r\n");
        wr.write("\r\n");

        // 데이터 전송
        wr.write(data);
        wr.flush();


        // 결과값 얻기
        ArrayList tmpArr = new ArrayList();
        while ((line = rd.readLine()) != null) {
            tmpArr.add(line);
        }
        wr.close();
        rd.close();

        String tmpMsg = (String)tmpArr.get(tmpArr.size()-1);
        String[] rMsg = tmpMsg.split(",");
        String Result= rMsg[0]; //발송결과
        String Count= ""; //잔여건수
        if(rMsg.length>1) {Count= rMsg[1]; }

        return Result;
    }
    catch (Exception e) {}
    return "error";
        /*
        if(Result.equals("success")) {
        	out.println("<script>parent.smsSendResult('');</script>");
        } else if(Result.equals("3205")) {
        	out.println("<script>parent.smsSendResult('잘못된 번호형식입니다.');</script>");
        } else {
        	out.println("<script>parent.smsSendResult('인증번호 발송에 실패했습니다. 다시 시도해 주세요.');</script>");
        }
}
    //발송결과 알림
//     if(Result.equals("success")) {
//         alert = "성공적으로 발송하였습니다.";
//         alert += " 잔여건수는 "+ Count+"건 입니다.";
//     }
//     else if(Result.equals("reserved")) {
//         alert = "성공적으로 예약되었습니다";
//         alert += " 잔여건수는 "+ Count+"건 입니다.";
//     }
//     else if(Result.equals("3205")) {
//         alert = "잘못된 번호형식입니다.";
//     }
//     else {
//         alert = "[Error]"+Result;
//     }

//     out.println(nointeractive);

//     if(nointeractive.equals("1") && !(Result.equals("Test Success!")) && !(Result.equals("success")) && !(Result.equals("reserved")) ) {
//         out.println("<script>alert('" + alert + "')</script>");
//     }
//     else if(!(nointeractive.equals("1"))) {
//         out.println("<script>alert('" + alert + "')</script>");
//     }


//     out.println("<script>location.href='"+returnurl+"';</script>");
        } else if (action.equals("test")) {
        	out.println("<script>parent.smsSendResult('');</script>");
        }
        */
}
%>





